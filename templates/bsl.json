{
    "name": "1C:Enterprise BSL",
    "scopeName": "source.bsl",
    "fileTypes": ["bsl", "os"],
    "patterns": [
        { "include": "#module-content" }
    ],
    "repository": {
        "module-content": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#regions" },
                { "include": "#directives" },
                { "include": "#annotations" },
                { "include": "#function-definition" },
                { "include": "#control-flow" },
                { "include": "#expressions" },
                { "include": "#keywords" },
                { "include": "#types" },
                { "include": "#numbers" },
                { "include": "#strings" },
                { "include": "#literals" },
                { "include": "#operators" },
                { "include": "#constants" },
                { "include": "#variables" }
            ]
        },
        "code-block": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#regions" },
                { "include": "#directives" },
                { "include": "#annotations" },
                { "include": "#function-definition" },
                { "include": "#control-flow" },
                { "include": "#expressions" },
                { "include": "#keywords" },
                { "include": "#types" },
                { "include": "#numbers" },
                { "include": "#strings" },
                { "include": "#literals" },
                { "include": "#operators" },
                { "include": "#constants" },
                { "include": "#variables" }
            ]
        },
        "comments": {
            "patterns": [
                { "name": "comment.line.double-slash.bsl", "match": "//.*$" }
            ]
        },
        "regions": {
            "patterns": [
                {
                    "name": "meta.region.bsl",
                    "begin": "(#)(Область)\\s+([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                    "end": "(#)(КонецОбласти)",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.directive.bsl" },
                        "2": { "name": "keyword.other.region.bsl" },
                        "3": { "name": "entity.name.region.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.directive.bsl" },
                        "2": { "name": "keyword.other.region.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.region.body.bsl",
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        }
                    ]
                }
            ]
        },
        "directives": {
            "patterns": [
                {
                    "name": "meta.preprocessor.bsl",
                    "match": "#(Если|ИначеЕсли|Иначе|КонецЕсли|Вставка|КонецВставки|Использовать|Клиент|Сервер|ВнешнееСоединение|МобильноеПриложениеКлиент|МобильноеПриложениеСервер|ТолстыйКлиентОбычноеПриложение|ТолстыйКлиентУправляемоеПриложение|ТонкийКлиент|ВебКлиент)"
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "name": "meta.annotation.bsl",
                    "match": "&(Перед|После|Вместо|ИзменениеИКонтроль|Before|After|Around|ChangeAndValidate)\\b"
                }
            ]
        },
        "function-definition": {
            "patterns": [
                {
                    "name": "meta.function.bsl",
                    "begin": "\\b(Функция|Процедура)\\s+([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s*\\(",
                    "end": "\\b(КонецФункции|КонецПроцедуры)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.function.bsl" },
                        "2": { "name": "entity.name.function.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.function.bsl" }
                    },
                    "patterns": [
                        { "include": "#function-parameters" },
                        { "include": "#function-body" },
                        { "include": "#function-return" }
                    ]
                }
            ]
        },
        "function-parameters": {
            "patterns": [
                {
                    "name": "meta.function.parameters.bsl",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "variable.parameter.bsl",
                            "match": "\\b(Знач\\s+)?([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s*(=\\s*[^,)]+)?",
                            "captures": {
                                "1": { "name": "keyword.control.bsl" },
                                "2": { "name": "variable.parameter.bsl" },
                                "3": { "name": "meta.default-value.bsl" }
                            }
                        },
                        { "include": "#comments" },
                        { "include": "#types" },
                        { "include": "#constants" }
                    ]
                }
            ]
        },
        "function-body": {
            "patterns": [
                {
                    "name": "meta.function.body.bsl",
                    "begin": "(?<=\\))\\s*",
                    "end": "(?=\\b(КонецФункции|КонецПроцедуры)\\b)",
                    "patterns": [
                        { "include": "#code-block" }
                    ]
                }
            ]
        },
        "function-return": {
            "patterns": [
                {
                    "name": "keyword.control.return.bsl",
                    "match": "\\bВозврат\\b"
                }
            ]
        },
        "expressions": {
            "patterns": [
                { "include": "#ternary" },
                { "include": "#function-call" },
                { "include": "#object-creation" },
                { "include": "#method-call" },
                { "include": "#property-access" },
                { "include": "#assignment" }
            ]
        },
        "assignment": {
            "patterns": [
                {
                    "name": "meta.assignment.bsl",
                    "begin": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s*=\\s*(?!(?:Новый|\\?\\())",
                    "end": "(?=\\s*;|\\s*$)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.bsl" }
                    },
                    "patterns": [
                        { "include": "#ternary" },
                        { "include": "#function-call" },
                        { "include": "#object-creation" },
                        { "include": "#method-call" },
                        { "include": "#property-access" },
                        { "include": "#keywords" },
                        { "include": "#types" },
                        { "include": "#numbers" },
                        { "include": "#strings" },
                        { "include": "#literals" },
                        { "include": "#operators" },
                        { "include": "#constants" }
                    ]
                }
            ]
        },
        "ternary": {
            "patterns": [
                {
                    "name": "meta.ternary.singleline.bsl",
                    "match": "\\?\\(([^\n]*)\\)",
                    "captures": {
                        "0": { "name": "meta.ternary.bsl" }
                    }
                },
                {
                    "name": "meta.ternary.multiline.bsl",
                    "begin": "\\?\\(",
                    "end": "\\)\\s*(;|,|$)",
                    "patterns": [
                        { "include": "#expressions" },
                        { "include": "#keywords" },
                        { "include": "#types" },
                        { "include": "#numbers" },
                        { "include": "#strings" },
                        { "include": "#operators" },
                        { "include": "#variables" },
                        { "include": "#constants" }
                    ]
                }
            ]
        },
        "function-call": {
            "patterns": [
                {
                    "name": "meta.function-call.bsl",
                    "begin": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": { "name": "entity.name.function.call.bsl" }
                    },
                    "patterns": [
                        { "include": "#function-call-arguments" },
                        { "include": "#expressions" },
                        { "include": "#keywords" },
                        { "include": "#types" },
                        { "include": "#numbers" },
                        { "include": "#strings" },
                        { "include": "#operators" },
                        { "include": "#variables" },
                        { "include": "#constants" }
                    ]
                }
            ]
        },
        "object-creation": {
            "patterns": [
                {
                    "name": "meta.object-creation.bsl",
                    "begin": "\\b(Новый)\\s+([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                    "end": "(?=\\s|;|,|\\)|\\]|\\})",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.bsl" },
                        "2": { "name": "storage.type.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.constructor.arguments.bsl",
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                { "include": "#expressions" },
                                { "include": "#keywords" },
                                { "include": "#types" },
                                { "include": "#numbers" },
                                { "include": "#strings" },
                                { "include": "#operators" },
                                { "include": "#variables" },
                                { "include": "#constants" }
                            ]
                        }
                    ]
                }
            ]
        },
        "method-call": {
            "patterns": [
                {
                    "name": "meta.method-call.bsl",
                    "begin": "([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\.([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.bsl" },
                        "2": { "name": "entity.name.function.call.bsl" }
                    },
                    "patterns": [
                        { "include": "#function-call-arguments" },
                        { "include": "#expressions" },
                        { "include": "#keywords" },
                        { "include": "#types" },
                        { "include": "#numbers" },
                        { "include": "#strings" },
                        { "include": "#operators" },
                        { "include": "#variables" },
                        { "include": "#constants" }
                    ]
                }
            ]
        },
        "property-access": {
            "patterns": [
                {
                    "name": "meta.property-access.bsl",
                    "begin": "([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\.([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)(?!\\s*\\()",
                    "end": "(?=\\s|,|;|\\)|\\]|\\}|$)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.bsl" },
                        "2": { "name": "variable.other.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.property-chain.bsl",
                            "match": "\\.([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)(?!\\s*\\()",
                            "captures": {
                                "1": { "name": "variable.other.bsl" }
                            }
                        }
                    ]
                }
            ]
        },
        "control-flow": {
            "patterns": [
                { "include": "#if-statement" },
                { "include": "#for-loop" },
                { "include": "#while-loop" },
                { "include": "#try-catch" }
            ]
        },
        "condition-expression": {
            "patterns": [
                { "include": "#expressions" },
                { "include": "#keywords" },
                { "include": "#types" },
                { "include": "#numbers" },
                { "include": "#strings" },
                { "include": "#literals" },
                { "include": "#operators" },
                { "include": "#constants" },
                { "include": "#comments" }
            ]
        },
        "if-statement": {
            "patterns": [
                {
                    "name": "meta.control-flow.if.bsl",
                    "begin": "\\b(Если)\\b",
                    "end": "\\b(КонецЕсли)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.control-flow.if-condition.bsl",
                            "begin": "\\bЕсли\\b",
                            "end": "\\bТогда\\b",
                            "beginCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "endCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "patterns": [
                                { "include": "#condition-expression" }
                            ]
                        },
                        {
                            "name": "meta.control-flow.elseif-condition.bsl",
                            "begin": "\\b(ИначеЕсли)\\b",
                            "end": "\\bТогда\\b",
                            "beginCaptures": {
                                "1": { "name": "keyword.control.bsl" }
                            },
                            "endCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "patterns": [
                                { "include": "#condition-expression" }
                            ]
                        },
                        {
                            "name": "meta.control-flow.else.bsl",
                            "match": "\\b(Иначе)\\b",
                            "captures": {
                                "1": { "name": "keyword.control.bsl" }
                            }
                        },
                        {
                            "name": "meta.control-flow.if-body.bsl",
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        }
                    ]
                }
            ]
        },
        "for-loop": {
            "patterns": [
                {
                    "name": "meta.control-flow.for.bsl",
                    "begin": "\\b(Для)\\b",
                    "end": "\\b(КонецЦикла)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.control-flow.for-header.bsl",
                            "begin": "\\bДля\\b",
                            "end": "\\bЦикл\\b",
                            "beginCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "endCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "patterns": [
                                { "include": "#condition-expression" }
                            ]
                        },
                        {
                            "name": "meta.control-flow.for-body.bsl",
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        }
                    ]
                }
            ]
        },
        "while-loop": {
            "patterns": [
                {
                    "name": "meta.control-flow.while.bsl",
                    "begin": "\\b(Пока)\\b",
                    "end": "\\b(КонецЦикла)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.control-flow.while-header.bsl",
                            "begin": "\\bПока\\b",
                            "end": "\\bЦикл\\b",
                            "beginCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "endCaptures": {
                                "0": { "name": "keyword.control.bsl" }
                            },
                            "patterns": [
                                { "include": "#condition-expression" }
                            ]
                        },
                        {
                            "name": "meta.control-flow.while-body.bsl",
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        }
                    ]
                }
            ]
        },
        "try-catch": {
            "patterns": [
                {
                    "name": "meta.control-flow.try.bsl",
                    "begin": "\\b(Попытка)\\b",
                    "end": "\\b(КонецПопытки)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "endCaptures": {
                        "1": { "name": "keyword.control.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.control-flow.try-body.bsl",
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        },
                        {
                            "name": "meta.control-flow.exception.bsl",
                            "begin": "\\b(Исключение)\\b",
                            "end": "(?=\\b(КонецПопытки)\\b)",
                            "beginCaptures": {
                                "1": { "name": "keyword.control.bsl" }
                            },
                            "patterns": [
                                { "include": "#code-block" }
                            ]
                        }
                    ]
                }
            ]
        },
        "function-call-arguments": {
            "patterns": [
                {
                    "name": "meta.function-call.arguments.bsl",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "variable.parameter.bsl",
                            "match": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\b",
                            "captures": {
                                "1": { "name": "variable.parameter.bsl" }
                            }
                        },
                        { "include": "#condition-expression" }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.bsl",
                    "match": "\\b(Если|ИначеЕсли|Иначе|КонецЕсли|Для|Каждого|Из|По|Пока|Цикл|КонецЦикла|Перем|Перейти|Продолжить|Прервать|И|Или|Не|Попытка|Исключение|ВызватьИсключение|КонецПопытки|Новый|Выполнить|Экспорт|Знач|Тип|ТипЗнч|ЗначениеЗаполнено|ПустаяСтрока|СокрЛП|СтрДлина|СтрЗаменить|СтрШаблон|ТекущаяДата|ДобавитьМесяц|ДобавитьДень|Мин|Макс|Окр)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.bsl",
                    "match": "\\b(Число|Строка|Дата|Булево|Неопределено|Массив|Структура|Соответствие|СписокЗначений|ТаблицаЗначений|ДеревоЗначений|Тип|ОписаниеТипов|СправочникСсылка|ДокументСсылка|ПеречислениеСсылка|Запрос|РезультатЗапроса|ПакетЗапросов|РезультатПакетаЗапросов)\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.bsl",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.float.bsl",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.numeric.hex.bsl",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.scientific.bsl",
                    "match": "\\b\\d+(\\.\\d+)?[eE][+-]?\\d+\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.bsl",
                    "match": "(?<!\")\"\"(?=[\\s,;])"
                },
                {
                    "name": "string.quoted.double.bsl",
                    "begin": "(?<!\")\"(?!\")",
                    "end": "(?<!\")\"(?!\")",
                    "patterns": [
                        {
                            "name": "constant.character.escape.bsl",
                            "match": "\"\""
                        },
                        {
                            "name": "constant.character.escape.bsl",
                            "match": "\\\\."
                        },
                        { "include": "#query" }
                    ]
                },
                {
                    "name": "string.quoted.single.bsl",
                    "begin": "(?<!')'(?!')",
                    "end": "(?<!')'(?!')",
                    "patterns": [
                        {
                            "name": "constant.character.escape.bsl",
                            "match": "''"
                        },
                        {
                            "name": "constant.character.escape.bsl",
                            "match": "\\\\."
                        },
                        { "include": "#query" }
                    ]
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.bsl",
                    "match": "(\\+|\\-|\\*|\\/|%|=|<>|<=|>=|<|>|\\.|\\[|\\]|:|;|,|\\?)"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.bsl",
                    "match": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.bsl",
                    "match": "\\b(Истина|Ложь|NULL)\\b"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "constant.language.date.bsl",
                    "match": "\\b\\d{1,2}\\.\\d{1,2}\\.\\d{4}\\b"
                },
                {
                    "name": "constant.language.datetime.bsl",
                    "match": "\\b\\d{1,2}\\.\\d{1,2}\\.\\d{4}\\s+\\d{1,2}:\\d{2}(:\\d{2})?\\b"
                },
                {
                    "name": "constant.language.time.bsl",
                    "match": "\\b\\d{1,2}:\\d{2}(:\\d{2})?\\b"
                }
            ]
        },
        "query": {
            "begin": "(?=\\s*\\bВЫБРАТЬ\\b)",
            "end": "(?<!\")(?=\"[^\"]+)",
            "patterns": [
                { "include": "#query-comments" },
                { "include": "#query-keywords" },
                { "include": "#query-expressions" },
                { "include": "#query-functions" },
                { "include": "#query-operators" },
                { "include": "#query-literals" },
                { "include": "#query-identifiers" }
            ]
        },
        "query-keywords": {
            "patterns": [
                {
                    "name": "keyword.other.query.bsl",
                    "match": "\\b(ВЫБРАТЬ|РАЗРЕШЕННЫЕ|РАЗЛИЧНЫЕ|ПЕРВЫЕ|ПОМЕСТИТЬ|ДОБАВИТЬ|ИЗ|ГДЕ|СГРУППИРОВАТЬ|ИМЕЮЩИЕ|УПОРЯДОЧИТЬ|ИТОГИ|ОБЪЕДИНИТЬ|ВСЕ|АВТОУПОРЯДОЧИВАНИЕ|ИНДЕКСИРОВАТЬ|НАБОРАМ|УНИКАЛЬНО|УНИЧТОЖИТЬ|ДЛЯ|ИЗМЕНЕНИЯ|ВНУТРЕННЕЕ|ЛЕВОЕ|ПРАВОЕ|ПОЛНОЕ|ВНЕШНЕЕ|СОЕДИНЕНИЕ|ПО|КАК|КОГДА|ТОГДА|ИНАЧЕ|КОНЕЦ|ЕСТЬ|ВОЗР|УБЫВ|ИЕРАРХИЯ|ОБЩИЕ|ПЕРИОДАМИ|ТОЛЬКО|СЕКУНДА|МИНУТА|ЧАС|ДЕНЬ|НЕДЕЛЯ|МЕСЯЦ|КВАРТАЛ|ГОД|ДЕКАДА|ПОЛУГОДИЕ|НАЧАЛОПЕРИОДА|КОНЕЦПЕРИОДА|ДОБАВИТЬКДАТЕ|РАЗНОСТЬДАТ|ВЫРАЗИТЬ|ЗНАЧЕНИЕ|ПУСТАЯТАБЛИЦА|ПРЕДСТАВЛЕНИЕ|ТИП|ТИПЗНАЧЕНИЯ|ССЫЛКА|СТРОКА|ЧИСЛО|ДАТА|ДАТАВРЕМЯ|БУЛЕВО|НЕОПРЕДЕЛЕНО|ИСТИНА|ЛОЖЬ|NULL|ВОЗ|УБЫВ|АВТОУПОРЯДОЧИВАНИЕ|ГРУППИРУЮЩИМ|НАБОРАМ|УНИКАЛЬНО|УНИЧТОЖИТЬ|ДЛЯ|ИЗМЕНЕНИЯ|ВНУТРЕННЕЕ|ЛЕВОЕ|ПРАВОЕ|ПОЛНОЕ|ВНЕШНЕЕ|СОЕДИНЕНИЕ|ПО|КАК|КОГДА|ТОГДА|ИНАЧЕ|КОНЕЦ|ЕСТЬ|ВОЗР|УБЫВ|ИЕРАРХИЯ|ОБЩИЕ|ПЕРИОДАМИ|ТОЛЬКО|СЕКУНДА|МИНУТА|ЧАС|ДЕНЬ|НЕДЕЛЯ|МЕСЯЦ|КВАРТАЛ|ГОД|ДЕКАДА|ПОЛУГОДИЕ|НАЧАЛОПЕРИОДА|КОНЕЦПЕРИОДА|ДОБАВИТЬКДАТЕ|РАЗНОСТЬДАТ|ВЫРАЗИТЬ|ЗНАЧЕНИЕ|ПУСТАЯТАБЛИЦА|ПРЕДСТАВЛЕНИЕ|ТИП|ТИПЗНАЧЕНИЯ|ССЫЛКА|СТРОКА|ЧИСЛО|ДАТА|ДАТАВРЕМЯ|БУЛЕВО|НЕОПРЕДЕЛЕНО|ИСТИНА|ЛОЖЬ|NULL)\\b"
                }
            ]
        },
        "query-functions": {
            "patterns": [
                {
                    "name": "meta.query-function.bsl",
                    "begin": "\\b(СУММА|СРЕДНЕЕ|МИНИМУМ|МАКСИМУМ|КОЛИЧЕСТВО|АВТОНОМЕРЗАПИСИ|ВРЕГ|ГОД|ДЕНЬ|ДЕНЬГОДА|ДЕНЬНЕДЕЛИ|ДЛИНАСТРОКИ|ДОБАВИТЬКДАТЕ|ЕСТЬNULL|КВАРТАЛ|КОНЕЦПЕРИОДА|ЛЕВ|МЕСЯЦ|МИНУТА|НАЧАЛОПЕРИОДА|НЕДЕЛЯ|НРЕГ|ОКР|ПОДСТРОКА|ПРАВ|ПРЕДСТАВЛЕНИЕ|РАЗМЕРХРАНИМЫХДАННЫХ|РАЗНОСТЬДАТ|СГРУППИРОВАНОПО|СЕКУНДА|ЭКСП|ЛОГ|ЛОГ10|ПОВ|СКРТ|ВЫБОР|ПОДОБНО|СПЕЦСИМВОЛ|МЕЖДУ|В|ПОДСТРОКА|ВЫРАЗИТЬ|ЗНАЧЕНИЕ|ПУСТАЯТАБЛИЦА|ПРЕДСТАВЛЕНИЕ|ТИП|ТИПЗНАЧЕНИЯ|ССЫЛКА|СТРОКА|ЧИСЛО|ДАТА|ДАТАВРЕМЯ|БУЛЕВО|НЕОПРЕДЕЛЕНО|ИСТИНА|ЛОЖЬ|NULL)\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "0": { "name": "keyword.other.query-functions.bsl" }
                    },
                    "patterns": [
                        { "include": "#query" }
                    ]
                }
            ]
        },
        "query-expressions": {
            "patterns": [
                {
                    "name": "meta.query-field-access.bsl",
                    "begin": "([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\.([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                    "end": "(?=\\s|,|;|\\)|\\]|\\}|$)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.table.bsl" },
                        "2": { "name": "variable.other.field.bsl" }
                    },
                    "patterns": [
                        {
                            "name": "meta.query-field-chain.bsl",
                            "match": "\\.([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                            "captures": {
                                "1": { "name": "variable.other.field.bsl" }
                            }
                        }
                    ]
                },
                {
                    "name": "meta.query-parameter.bsl",
                    "match": "&([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                    "captures": {
                        "1": { "name": "variable.parameter.query.bsl" }
                    }
                },
                {
                    "name": "meta.query-alias.bsl",
                    "match": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\s+КАК\\s+([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)",
                    "captures": {
                        "1": { "name": "variable.other.field.bsl" },
                        "2": { "name": "variable.other.alias.bsl" }
                    }
                }
            ]
        },
        "query-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.query.bsl",
                    "match": "\\b(И|ИЛИ|НЕ|ЕСТЬ|ЕСТЬNULL|ПОДОБНО|МЕЖДУ|В)\\b"
                },
                {
                    "name": "keyword.operator.comparison.query.bsl",
                    "match": "(=|<>|<=|>=|<|>|\\+)"
                },
                {
                    "name": "keyword.operator.logical.query.bsl",
                    "match": "\\b(И|ИЛИ|НЕ)\\b"
                }
            ]
        },
        "query-literals": {
            "patterns": [
                {
                    "name": "constant.language.query.bsl",
                    "match": "\\b(ИСТИНА|ЛОЖЬ|NULL|НЕОПРЕДЕЛЕНО)\\b"
                },
                {
                    "name": "constant.numeric.query.bsl",
                    "match": "\\b\\d+(\\.\\d+)?\\b"
                },
                {
                    "name": "string.quoted.double.query.bsl",
                    "begin": "(?<!\")\"(?!\")",
                    "end": "(?<!\")\"(?!\")",
                    "patterns": [
                        {
                            "name": "constant.character.escape.query.bsl",
                            "match": "\"\""
                        }
                    ]
                }
            ]
        },
        "query-identifiers": {
            "patterns": [
                {
                    "name": "variable.other.table.bsl",
                    "match": "\\b([А-Яа-яA-Za-z_][А-Яа-яA-Za-z0-9_]*)\\b"
                }
            ]
        },
        "query-comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.query.bsl",
                    "match": "//.*$"
                }
            ]
        }
    }
}
