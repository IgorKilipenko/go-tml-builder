package regexputil_test

import (
	"testing"

	"github.com/IgorKilipenko/go-tml-builder/internal/core/regexputil"
	"github.com/stretchr/testify/assert"
)

func TestEscapeUnescape(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{"Simple", `\w+`, `\\w+`},
		{"DoubleEscape", `\\`, `\\\\`},
		{"Mixed", `\d\\s\S`, `\\d\\\\s\\S`},
		{"NoEscape", "abc", "abc"},
		{"Complex", `([A-Za-z–ê-–Ø–Å–∞-—è—ë]+)\s*=\s*"([^"]*)"`, `([A-Za-z–ê-–Ø–Å–∞-—è—ë]+)\\s*=\\s*\"([^\"]*)\"`},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// –¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
			escaped := regexputil.EscapeForJSON(tt.input)
			assert.Equal(t, tt.expected, escaped)

			// –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
			unescaped := regexputil.UnescapeFromJSON(escaped)
			assert.Equal(t, tt.input, unescaped)
		})
	}
}

func TestEdgeCases(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{"Empty", "", ""},
		{"SingleBackslash", `\`, `\\`},
		{"MultipleBackslashes", `\\\`, `\\\\\\`},
		{"MixedWithQuotes", `\"Hello\"`, `\\\"Hello\\\"`},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			escaped := regexputil.EscapeForJSON(tt.input)
			assert.Equal(t, tt.expected, escaped)
			assert.Equal(t, tt.input, regexputil.UnescapeFromJSON(escaped))
		})
	}
}

func TestValidate(t *testing.T) {
	tests := []struct {
		pattern string
		isValid bool
	}{
		{`\w+`, true},
		{`[a-z`, false}, // –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ regexp
	}

	for _, tt := range tests {
		err := regexputil.Validate(tt.pattern)
		if tt.isValid {
			assert.NoError(t, err)
		} else {
			assert.Error(t, err)
		}
	}
}

func TestUnicodeUnescape(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{`\\\\‚Üí`, `\\‚Üí`},   // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–µ—à + Unicode
		{`\\Êó•Êú¨`, `\Êó•Êú¨`},    // –ò–µ—Ä–æ–≥–ª–∏—Ñ—ã
		{`\\—ã\\—è`, `\—ã\—è`}, // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
		{`\\ü¶Ñ`, `\ü¶Ñ`},      // Emoji
		{`\\‚òÖ`, `\‚òÖ`},      // –°–∏–º–≤–æ–ª –∑–≤–µ–∑–¥—ã
	}

	for _, tt := range tests {
		t.Run(tt.input, func(t *testing.T) {
			assert.Equal(t, tt.expected, regexputil.UnescapeFromJSON(tt.input))
		})
	}
}

func TestEscapeForJSON_Unicode(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{`‚Üí`, `‚Üí`},
		{`\\‚Üí`, `\\\\‚Üí`},
		{`\"Êó•Êú¨\"`, `\\\"Êó•Êú¨\\\"`},
		{`ü¶Ñ`, `ü¶Ñ`},
		{`\\‚òÖ`, `\\\\‚òÖ`},
	}

	for _, tt := range tests {
		t.Run(tt.input, func(t *testing.T) {
			assert.Equal(t, tt.expected, regexputil.EscapeForJSON(tt.input))
		})
	}
}
